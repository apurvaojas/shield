version: "3.8"

services:
  # Main Shield API Application
  shield-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "${PORT:-8081}:${PORT:-8081}"
    env_file: ".env"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DB_HOST=${DB_HOST:-postgres}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - OPA_SERVER_URL=${OPA_SERVER_URL:-http://opa:8181}
    depends_on:
      - postgres
      - redis
    networks:
      - shield-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8081/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    env_file: ".env"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - shield-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-shield} -d ${POSTGRES_DB:-shield_auth}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Session Storage
  redis:
    image: redis:7-alpine
    env_file: ".env"
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - shield-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    env_file: ".env"
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - shield-network
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    env_file: ".env"
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686" # Jaeger UI
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268" # Jaeger collector HTTP
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      SPAN_STORAGE_TYPE: memory
    networks:
      - shield-network
    restart: unless-stopped

networks:
  shield-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
