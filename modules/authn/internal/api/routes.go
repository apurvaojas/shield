package api

import (
	"github.com/gin-gonic/gin"

	"shield/modules/authn/internal/auth"
	// _ "shield/modules/authn/docs" // docs is generated by Swag CLI; uncomment after running swag init
	// Import other necessary packages like config, db, etc. for full initialization
)

// RegisterAuthRoutes registers authentication and authorization related routes.
// This function would be called by the main application to set up these routes.
func RegisterAuthRoutes(router gin.IRouter /* *gin.Engine or *gin.RouterGroup */, authService *auth.AuthService) {
	// Initialize handler (dependencies like AuthService would be injected)
	// In a real setup, AuthService itself would be initialized with its dependencies (DB, Cognito client, config)
	// For now, we assume authService is already initialized and passed in.
	authHandler := NewAuthHandler(authService)

	// Group routes for /auth
	authRoutes := router.Group("/auth")
	{
		// Signup routes
		authRoutes.POST("/signup", authHandler.Signup)
		authRoutes.POST("/confirm", authHandler.ConfirmSignup)

		// Authentication routes
		authRoutes.POST("/login", authHandler.Login)
		authRoutes.POST("/logout", authHandler.Logout)
		authRoutes.POST("/refresh", authHandler.RefreshToken)

		// MFA routes
		mfaRoutes := authRoutes.Group("/mfa")
		{
			mfaRoutes.POST("/setup", authHandler.SetupMFA)
			mfaRoutes.POST("/verify", authHandler.VerifyMFA)
		}
	}

	// Organization signup routes
	orgRoutes := router.Group("/org")
	{
		orgRoutes.POST("/signup", authHandler.OrgSignup)
	}

	// Swagger route specific to this module if run standalone (now handled by main app)
	// router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
}

// Example of how this might be used in a hypothetical main.go:
//
// package main
//
// import (
// 	"github.com/gin-gonic/gin"
// 	"github.com/tentackles/shield/modules/authn/internal/api"
// 	"github.com/tentackles/shield/modules/authn/internal/auth"
// 	// ... other imports for db, config ...
// )
//
// func main() {
// 	router := gin.Default()
//
// 	// --- Initialize dependencies ---
// 	// db := database.Connect() // Example
// 	// cognitoProvider := cognito.New(...) // Example
// 	// appConfig := config.Load() // Example
//
// 	// authRepo := repository.NewAuthRepository(db) // Example
// 	authSvc := auth.NewAuthService(/* cognitoProvider, authRepo, appConfig */) // Example with actual dependencies
//
// 	// --- Register Routes ---
// 	api.RegisterAuthRoutes(router, authSvc)
//
// 	router.Run(":8080")
// }
